pipeline{

    agent any
    environment{

        VERSION = "${env.BUILD_ID}"
    }
        stages{

            stage('sonar quality status')   {

                agent{

                   docker{
                       image 'maven'
                   } 
                }

                steps{

                    script{

                        withSonarQubeEnv(credentialsId: 'sonar key1', installationName: 'sonarqube server') 
                        {
                        sh 'mvn clean package sonar:sonar'
                        }

                    }
                }
            }

            stage('quality gate status'){

                steps{

                    script{

                        waitForQualityGate abortPipeline: false, credentialsId: 'sonar key1'

                    }
                }
            }

            stage('docker build and push to nexus repo'){
            

                steps{

                    script{
                        withCredentials([string(credentialsId: 'nexus-password', variable: 'nexus-password')]) 
                        {

                        sh'''
                        docker build -t 3.237.174.220:8083/springapp:${VERSION} .
                        
                        docker login -u admin -p admin 3.237.174.220:8083
                        
                        docker push 3.237.174.220:8083/springapp:${VERSION}

                        docker rmi 3.237.174.220:8083/springapp:${VERSION}
                        '''

                         }
                    }
                }
            }
            stage('identifying misconfig using datree in helm charts'){

                steps{

                    script{

                        dir('kubernetes/myapp/') {

                             withEnv(['DATREE_TOKEN=b72ff5db-28c9-4519-8d79-979451bea473']) {
                            sh'helm datree test .'
                            }
                        }

                    }
                }
            }
        }

    post {
		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "rakeshkoduri250@gmail.com";  
		}
	}

}
